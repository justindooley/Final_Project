library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(corrplot)
library(gridExtra)
library(GGally)
library(stats)
wines <- read.csv("input/combined_wine_binary.csv", header = TRUE)
head(wines, n=10)
ggplot(wines, aes(displ, hwy, colour = class)) +
geom_point()
ggplot(wines, aes(hwy, colour = class)) +
geom_point()
library(ggplot2)
ggplot(wines, aes(displ, hwy, colour = class)) +
geom_point()
mean_value <- aggregate(wines, by=list(wines_k5$cluster), mean)
set.seed(1002476)
wines_k5 <- kmeans(wines, centers=5)
# Mean values of each cluster
mean_value <- aggregate(wines, by=list(wines_k5$cluster), mean)
mean_value
mean_value <- aggregate(wines, by=list(wines_k5$cluster), mean)
mean_value
summary(mean_value)
ggplot(data = wines) +
geom_point(mapping = aes(x = displ, y = hwy))
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x=value)) +
geom_histogram(fill="purple", colour="black") +
facet_wrap(~Attributes, scales="free_x") +
labs(x="Values", y="Frequency")
ggplot(data = wines) +
geom_point(mapping = aes(x = quality, y = alcohol))
corrplot(cor(wines), type="upper", method="ellipse", tl.cex=0.9)
ggplot(data = wines) +
geom_point(mapping = aes(x = total_sulfur_dioxide, y = type))
names(wines) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
ggplot(data = wines) +
geom_point(mapping = aes(x = total_sulfur_dioxide, y = type))
ggplot(data = wines) +
geom_point(mapping = aes(x = total_sulfur_dioxide, y = wine_type))
ggplot(data = wines) +
geom_point(mapping = aes(x = total_sulfur_dioxide, y = alcohol))
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x=value)) +
geom_histogram(fill="purple", colour="black") +
facet_wrap(~Attributes, scales="free_x") +
labs(x="Values", y="Frequency")
# Run the algorithm for different values of k
bss <- numeric()
wss <- numeric()
for(i in 1:13){
# For each k, calculate betweenss and tot.withinss
bss[i] <- kmeans(wines, centers=i)$betweenss
wss[i] <- kmeans(wines, centers=i)$tot.withinss
}
wines_k5 <- kmeans(wines, centers=5)
mean_value <- aggregate(wines, by=list(wines_k5$cluster), mean)
mean_value
wines_k13 <-kmeans(wines[,-c(1,13)], centers=13)
wines_k13$centers # Display cluster centers
table(wines_k13$cluster) # Give a count of data points in each cluster
table(wines_k13_centers$cluster)
wines_k13_centers <-kmeans(wines, centers=13)
wines_k13_centers$centers # Display cluster centers
table(wines_k13_centers$cluster) # Give a count of data points in each cluster
# Remove columns 1 and 13
wines_k13 <-kmeans(wines[,-c(1,13)], centers=13)
wines_k13$centers # Display cluster centers
table(wines_k13$cluster) # Give a count of data points in each cluster
table(wines_k13_centers$cluster)
wines_k5 <-kmeans(wines[,-c(13)], centers=5)
wines_k5$centers # Display cluster centers
table(wines_k5$cluster) # Give a count of data points in each cluster
table(wines_k5_centers$cluster)
table(wines_k5$cluster) # Give a count of data points in each cluster
wines_k5$centers # Display cluster centers
table(wines_k5$cluster) # Give a count of data points in each cluster
table(wines_k5_centers$cluster)
wines_k5 <-kmeans(wines[,-c(13)], centers=10)
wines_k5$centers # Display cluster centers
table(wines_k5$cluster) # Give a count of data points in each cluster
table(wines_k5_centers$cluster)
table(wines_k5_centers$cluster)
table(wines_k13_centers$cluster)
wines_k5_centers <-kmeans(wines, centers=13)
wines_k5_centers$centers # Display cluster centers
table(wines_k5_centers$cluster) # Give a count of data points in each cluster
wines_k5 <-kmeans(wines[,-c(13)], centers=10)
wines_k5$centers # Display cluster centers
table(wines_k5$cluster) # Give a count of data points in each cluster
table(wines_k5_centers$cluster)
wines_10_centers <-kmeans(wines, centers=10)
wines_10_centers$centers # Display cluster centers
table(wines_10_centers$cluster) # Give a count of data points in each cluster
# Testing
wines_10_centers <-kmeans(wines, centers=10)
wines_10_centers$centers # Display cluster centers
table(wines_10_centers$cluster) # Give a count of data points in each cluster
# Execution of k-means with k=10
wines_10 <-kmeans(wines[,-c(13)], centers=10)
wines_10$centers # Display cluster centers
table(wines_10$cluster) # Give a count of data points in each cluster
table(wines_10_centers$cluster)
# Mean values of each cluster
mean_value <- aggregate(wines, by=list(wines_10$cluster), mean)
mean_value
# Calculate the mean error / variance
summary(mean_value)
predictions <- log_reg(wines_10, size=10)
str(predictions)
predictions <- log_reg(wines_10, size=10)
wines_10_centers <-kmeans(wines, centers=10)
wines_10_centers$centers # Display cluster centers
table(wines_10_centers$cluster) # Give a count of data points in each cluster
wines_10 <-kmeans(wines[,-c(13)], centers=10)
wines_10$centers # Display cluster centers
table(wines_10$cluster) # Give a count of data points in each cluster
table(wines_10_centers$cluster)
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(corrplot)
library(gridExtra)
library(GGally)
library(stats)
library(ggplot2)
set.seed(1002476)
wines <- read.csv("input/combined_wine_binary.csv", header = TRUE)
names(wines) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
str(wines)
summary(wines)
wines <- scale(wines)
# K-Means Cluster Analysis
fit <- kmeans(wines, 5) # 5 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# Ward Hierarchical Clustering
d <- dist(wines, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=5, border="red")
# K-Means Cluster Analysis
fit <- kmeans(wines, 10) # 5 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# Ward Hierarchical Clustering
d <- dist(wines, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit) # display dendogram
groups <- cutree(fit, k=10) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=10, border="red")
# K-Means Cluster Analysis
fit <- kmeans(wines, 10) # 5 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# K-Means Clustering with 5 clusters
fit <- kmeans(mydata, 10)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(mydata, fit$cluster)
install.packages(cluster)
install.packages("cluster")
install.packages("cluster")
install.packages("fpc")
# K-Means Cluster Analysis
fit <- kmeans(wines, 10) # 5 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# K-Means Clustering with 5 clusters
fit <- kmeans(mydata, 10)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(mydata, fit$cluster)
# K-Means Cluster Analysis
fit <- kmeans(wines, 10) # 5 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# K-Means Clustering with 5 clusters
fit <- kmeans(wines, 10)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(wines, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(wines, fit$cluster)
# K-Means Cluster Analysis
fit <- kmeans(wines, 12) # 12 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# K-Means Clustering with 5 clusters
fit <- kmeans(wines, 12)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(wines, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Mean values of each cluster
mean_value <- aggregate(wines, by=list(wines_10$cluster), mean)
mean_value
summary(mean_value)
# K-Means Cluster Analysis
fit <- kmeans(wines, 5) # 12 cluster solution
# get cluster means
aggregate(wines,by=list(fit$cluster),FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# K-Means Clustering with 5 clusters
fit <- kmeans(wines, 5)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(wines, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(wines, fit$cluster)
aggregate(wines, by=list(fit$cluster), FUN=mean)
wines <- data.frame(wines, fit$cluster)
fit <- kmeans(wines, 5)
library(cluster)
clusplot(wines, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
plotcluster(wines, fit$cluster)
# K-Means Cluster Analysis
fit <- kmeans(wines, 2) # 12 cluster solution
# get cluster means
aggregate(wines, by=list(fit$cluster), FUN=mean)
# append cluster assignment
wines <- data.frame(wines, fit$cluster)
# K-Means Clustering with 5 clusters
fit <- kmeans(wines, 2)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(wines, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(wines, fit$cluster)
cluster.stats(d, fit1$cluster, fit2$cluster)
library(fpc)
cluster.stats(d, fit1$cluster, fit2$cluster)
cluster.stats(d, fit$cluster, fit$cluster)
round(clusexpect(1700, 12, 1500, 2000), digits=2)
cluster.stats(d, fit$cluster, fit$cluster)
View(wines)
View(fit)
View(fit)
View(wines)
View(fit)
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(corrplot)
library(gridExtra)
library(GGally)
library(stats)
library(ggplot2)
# Set the seed for reproducibility
set.seed(1002476)
wines <- read.csv("input/combined_wine_binary.csv", header = TRUE)
head(wines, n=10)
names(wines) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
# Run the algorithm for different values of k
bss <- numeric()
wss <- numeric()
for(i in 1:13)
{
# For each k, calculate betweenss and tot.withinss
bss[i] <- kmeans(wines, centers=i)$betweenss
wss[i] <- kmeans(wines, centers=i)$tot.withinss
}
# To study which value of k gives us the best partition
# Between-Cluster Sum of Squares vs Choice of k
p3 <- qplot(1:13, bss, geom=c("point", "line"),
xlab="Number of Clusters", ylab="Between-Cluster Sum of Squares") +
scale_x_continuous(breaks=seq(0, 13, 1))
# Total within-cluster sum of squares vs Choice of k
p4 <- qplot(1:13, wss, geom=c("point", "line"),
xlab="Number of Clusters", ylab="Total Within-Cluster Sum of Squares") +
scale_x_continuous(breaks=seq(0, 13, 1))
# Subplot
grid.arrange(p3, p4, ncol=2)
# K-Means Cluster Analysis with k=2
fit_2 <- kmeans(wines, 2) # 2 cluster solution
# get cluster means
aggregate(wines, by=list(fit$cluster), FUN=mean)
# append cluster assignment
wines_k2 <- data.frame(wines, fit_k2$cluster)
# K-Means Cluster Analysis with k=2
fit_2 <- kmeans(wines, 2) # 2 cluster solution
# get cluster means
aggregate(wines, by=list(fit_k2$cluster), FUN=mean)
# append cluster assignment
wines_k2 <- data.frame(wines, fit_k2$cluster)
# K-Means Cluster Analysis with k=2
fit <- kmeans(wines, 2) # 2 cluster solution
# get cluster means
aggregate(wines, by=list(fit$cluster), FUN=mean)
# append cluster assignment
wines_k2 <- data.frame(wines, fit$cluster)
write.csv(wines_k2, file = "wines_k2.csv")
# K-Means Cluster Analysis with k=10
fit <- kmeans(wines, 10) # 2 cluster solution
aggregate(wines, by=list(fit$cluster), FUN=mean) # get cluster means
wines_k10 <- data.frame(wines, fit$cluster) # append character assignment
write.csv(wines_10, file = "wines_10.csv")
# K-Means Cluster Analysis with k=10
fit <- kmeans(wines, 10) # 2 cluster solution
aggregate(wines, by=list(fit$cluster), FUN=mean) # get cluster means
wines_k10 <- data.frame(wines, fit$cluster) # append character assignment
write.csv(wines, file = "wines_10.csv")
# Write results to a new CSV file to visualize in Tableau
write.csv(wines_k2, file = "wines_k2.csv")
# K-Means Cluster Analysis with k=5
fit <- kmeans(wines, 5) # 2 cluster solution
aggregate(wines, by=list(fit$cluster), FUN=mean) # get cluster means
wines_k5 <- data.frame(wines, fit$cluster) # append character assignment
write.csv(wines_k5, file = "wines_k5.csv")
K-Means Cluster Analysis with k=10
fit <- kmeans(wines, 10) # 2 cluster solution
aggregate(wines, by=list(fit$cluster), FUN=mean) # get cluster means
wines_k10 <- data.frame(wines, fit$cluster) # append character assignment
# K-Means Cluster Analysis with k=10
fit <- kmeans(wines, 10) # 2 cluster solution
aggregate(wines, by=list(fit$cluster), FUN=mean) # get cluster means
wines_k10 <- data.frame(wines, fit$cluster) # append character assignment
write.csv(wines_k10, file = "wines_10.csv")
View(wines_k10)
