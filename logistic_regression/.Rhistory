# Load the libraries
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(stats)
library(ggplot2)
library(mltools)
library(data.table)
library(caret)
library(aod)
library(ROCR)
library(InformationValue)
library(pROC)
# Set the seed
set.seed(1002476)
# Load the data
raw_data <- read.csv("input/combined_wine_binary_quality.csv", header = TRUE)
# Rename the columns
names(raw_data) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
factor_wines <- factor(raw_data$quality, labels = c("less than 5",
"greater than or equal to 5"))
factor_wines
sample_size <- floor(0.80 * nrow(raw_data))
train_index <- sample(seq_len(nrow(raw_data)), size = sample_size)
train <- raw_data[train_index, ]
test <- raw_data[-train_index, ]
model <- glm(quality ~ wine_type + fixed_acidity + volatile_acidity
+ citric_acid + residual_sugar + chlorides + free_sulfur_dioxide
+ total_sulfur_dioxide + density + pH + sulphates
+ alcohol, data = train, family = binomial(link="logit"))
# Predicted scores
predicted <- plogis(predict(model, test))
optCutOff <- optimalCutoff(test$quality, predicted)[1]
summary(model)
anova(model, test="Chisq")
# Load the libraries
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(stats)
library(ggplot2)
library(mltools)
library(data.table)
library(caret)
library(aod)
library(ROCR)
library(InformationValue)
library(pROC)
# Set the seed
set.seed(1002476)
set.seed(1002476)
raw_data <- read.csv("input/combined_wine_binary_quality.csv", header = TRUE)
names(raw_data) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
factor_wines <- factor(raw_data$quality, labels = c("less than 5",
"greater than or equal to 5"))
factor_wines
sample_size <- floor(0.80 * nrow(raw_data))
train_index <- sample(seq_len(nrow(raw_data)), size = sample_size)
train <- raw_data[train_index, ]
test <- raw_data[-train_index, ]
down_train <- downSample(x = trainData[, colnames(train) %ni% "quality"],
y = trainData$quality)
down_train <- downSample(x = train[, colnames(train) %ni% "quality"],
y = train$quality)
down_train <- downSample(x = train[, colnames(train), "quality"],
y = train$quality)
down_train <- downSample(train, quality, list = TRUE, yname = "Class")
down_train <- downSample(train, train$quality, list = TRUE, yname = "Class")
down_train <- downSample(train, factor_wines, list = TRUE, yname = "Class")
down_train <- downSample(train_index, factor_wines, list = TRUE, yname = "Class")
down_train <- downSample(train_index, factor_wines, list = FALSE, yname = "Class")
ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
model_with_down_sample <- train(Class ~ ., data = imbal_train,
method = "gbm",
preProcess = c("range"),
verbose = FALSE,
trControl = ctrl)
model_with_down_sample <- train(Class ~ ., data = raw_data,
method = "gbm",
preProcess = c("range"),
verbose = FALSE,
trControl = ctrl)
model_with_down_sample <- train(quality ~ ., data = raw_data,
method = "gbm",
preProcess = c("range"),
verbose = FALSE,
trControl = ctrl)
model_with_down_sample <- train(quality ~ ., data = raw_data,
method = "logit",
preProcess = c("range"),
verbose = FALSE,
trControl = ctrl)
model_with_down_sample <- train(quality ~ ., data = raw_data,
method = "glm",
preProcess = c("range"),
verbose = FALSE,
trControl = ctrl)
model_with_down_sample <- train(quality ~ wine_type + fixed_acidity + volatile_acidity
+ citric_acid + residual_sugar + chlorides + free_sulfur_dioxide
+ total_sulfur_dioxide + density + pH + sulphates + alcohol,
data = raw_data,
method = "glm",
preProcess = c("range"),
verbose = FALSE,
trControl = ctrl)
model_with_down_sample <- train(quality ~ wine_type + fixed_acidity + volatile_acidity
+ citric_acid + residual_sugar + chlorides + free_sulfur_dioxide
+ total_sulfur_dioxide + density + pH + sulphates + alcohol,
data = raw_data,
method = "glm",
preProcess = c("range"),
verbose = TRUE,
trControl = ctrl)
ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = tw
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
trainDataIndex <- createDataPartition(raw_data, p=0.7, list = F)  # 70% training data
trainData <- bc[trainDataIndex, ]
testData <- bc[-trainDataIndex, ]
trainDataIndex <- createDataPartition(raw_data, p=0.7, list = F)  # 70% training data
trainData <- raw_data[trainDataIndex, ]
testData <- raw_data[-trainDataIndex, ]
# Load the libraries
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(stats)
library(ggplot2)
library(mltools)
library(data.table)
library(caret)
library(aod)
library(ROCR)
library(InformationValue)
library(pROC)
# Set the seed
set.seed(1002476)
set.seed(1002476)
raw_data <- read.csv("input/combined_wine_binary_quality.csv", header = TRUE)
names(raw_data) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
factor_wines <- factor(raw_data$quality, labels = c("less than 5",
"greater than or equal to 5"))
factor_wines
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
# Prep Training and Test data
trainDataIndex <- createDataPartition(raw_data, p=0.7, list = F)  # 70% training data
trainData <- raw_data[trainDataIndex, ]
testData <- raw_data[-trainDataIndex, ]
trainDataIndex <- createDataPartition(raw_data, p=0.7, list = F)  # 70% training data
up_train <- upSample(x = train[, colnames(train) %ni% "wine_type"],
y = train$wine_type)
up_train <- upSample(x = train[, colnames(train) %ni% "Class"],
y = train$wine_type)
table(train$Class)
table(train$quality)
table(train$quality)
table()[[train$quality]]
up_train <- upSample(x = train[, colnames(train) %ni% "Class"],
y = train$wine_type)
sample_size <- floor(0.70 * nrow(raw_data))
train_index <- sample(seq_len(nrow(raw_data)), size = sample_size)
train <- raw_data[train_index, ]
test <- raw_data[-train_index, ]
raw_data <- read.csv("input/combined_wine_binary_quality.csv", header = TRUE)
names(raw_data) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
raw_data$quality <- factor(raw_data$quality, levels = c(0, 1))
is.factor(quality)
is.factor(raw_data$quality)
contrasts(raw_data$quality)
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
table(raw_data$quality)
trainDataIndex <- createDataPartition(raw_data$quality, p=0.7, list = F)  # 70% training data
table(trainData$quality)
trainData <- raw_data[trainDataIndex, ]
testData <- raw_data[-trainDataIndex, ]
table(trainData$quality)
up_train <- upSample(x = trainData[, colnames(trainData) %ni% "quality"],
y = trainData$quality)
table(up_train$Class)
model <- glm(quality ~ wine_type + fixed_acidity + volatile_acidity
+ citric_acid + residual_sugar + chlorides + free_sulfur_dioxide
+ total_sulfur_dioxide + density + pH + sulphates
+ alcohol, data = down_train, family = binomial(link="logit"))
model <- glm(quality ~ wine_type + fixed_acidity + volatile_acidity
+ citric_acid + residual_sugar + chlorides + free_sulfur_dioxide
+ total_sulfur_dioxide + density + pH + sulphates
+ alcohol, data = up_train, family = binomial(link="logit"))
table(trainData$quality)
up_train
table(up_train$Class)
table(up_train$quality)
model <- glm(Class ~ wine_type + fixed_acidity + volatile_acidity
+ citric_acid + residual_sugar + chlorides + free_sulfur_dioxide
+ total_sulfur_dioxide + density + pH + sulphates
+ alcohol, data = up_train, family = binomial(link="logit"))
predicted <- plogis(predict(model, testData))
predicted
optCutOff <- optimalCutoff(test$quality, predicted)[1]
optCutOff <- optimalCutoff(test$Class, predicted)[1]
summary(model)
summary(model)
vif(model)
misClassError(test$quality, predicted, threshold = optCutOff)
anova(model, test="Chisq")
confint(model)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 2:13)
fitted.results <- predict(model, newdata = subset(testData), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testData$quality)
print(paste('Accuracy', 1-misClasificError))
plotROC(testData$quality, predicted)
plotAUC(testData$quality, predicted)
Concordance(testData$quality, predicted)
sensitivity(testData$quality, predicted, threshold = optCutOff)
sensitivity(testData$quality, predicted)
specificity(testData$quality, predicted)
confusionMatrix(test$quality, predicted)
confusionMatrix(testData$quality, predicted)
ROC1 <- roc(test$quality, predicted)
plot(ROC1, col = "blue")
ROC1 <- roc(testData$quality, predicted)
plot(ROC1, col = "blue"
AUC1 <- auc(ROC1)
ROC1 <- roc(testData$quality, predicted)
plot(ROC1, col = "blue")
AUC1 <- auc(ROC1)
AUC1
