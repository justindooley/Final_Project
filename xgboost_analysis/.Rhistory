library(data.table)
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(corrplot)
library(gridExtra)
library(GGally)
library(stats)
library(xgboost)
library(stringr)
library(caret)
library(mlr)
wines <- read.csv("input/combined_wine_binary.csv", header = TRUE)
getwd()
wines <- read.csv("input/combined_wine_binary.csv", header = TRUE)
wines <- read.csv("input/combined_wine_binary.csv", header = TRUE)
names(wines) <- c("wine_type", "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality")
str(wines)
summary(wines)
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
trainDataIndex <- createDataPartition(wines$quality, p=0.7, list = F)  # 70% training data
trainData <- wines[trainDataIndex, ]
testData <- wines[-trainDataIndex, ]
table(trainData$quality)
labels <- trainData$quality
ts_label <- test$quality
ts_label <- testData$quality
params <- list(booster = "gbtree",
objective = "binary:logistic", eta=0.3, gamma=0, max_depth=6,
min_child_weight=1, subsample=1, colsample_bytree=1)
xgbcv <- xgb.cv(params = params, data = trainData, nrounds = 1000,
nfold = 5, showsd = T, stratified = T,
print_every_n = 10, early_stopping_rounds = 20, maximize = F)
dtrain <- xgb.DMatrix(data = trainData, label = labels)
dtest <- xgb.DMatrix(data = testData, label = ts_label)
labels <- trainData$wine_type
ts_label <- testData$wine_type
dtrain <- xgb.DMatrix(data = trainData, label = labels)
dtest <- xgb.DMatrix(data = testData, label = ts_label)
new_tr <- model.matrix(~.+0,data = trainData[,-c("wine_quality"), with=F])
new_ts <- model.matrix(~.+0,data = testData[,-c("wine_quality"), with=F])
new_tr <- model.matrix(~.+0,data = trainData[,-c("wine_quality"), with=F])
new_tr <- model.matrix(~.+0,data = trainData[,-c("wine_quality")])
new_ts <- model.matrix(~.+0,data = testData[,-c("wine_type"), with=F])
table(trainData$quality)
labels <- train$target
ts_label <- test$target
new_tr <- model.matrix(~.+0,data = train[,-c("target"),with=F])
new_ts <- model.matrix(~.+0,data = test[,-c("target"),with=F])
#convert factor to numeric
labels <- as.numeric(labels)-1
ts_label <- as.numeric(ts_label)-1
labels <- train$target
ts_label <- test$target
new_tr <- model.matrix(~.+0,data = trainData[,-c("target"),with=F])
new_ts <- model.matrix(~.+0,data = testData[,-c("target"),with=F])
labels <- train$quality
ts_label <- test$quality
new_tr <- model.matrix(~.+0,data = trainData[,-c("quality"),with=F])
new_ts <- model.matrix(~.+0,data = testData[,-c("quality"),with=F])
# Set the seed to make the partition reproducible
set.seed(2476)
train_index <- sample(seq_len(nrow(wines)), size = sample_size)
train <- wines[train_index, ]
test <- wines[-train_index, ]
# Convert dataframes to data tables
setDT(train)
setDT(test)
